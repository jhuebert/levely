<!--
Expected:
    Position
    Preferences
    Config
-->
{{- define "recall"}}
{{- template "header"}}
<div class="container h-100" id="recallId">
    <div class="row text-light mb-2">
        <div class="col text-center h3">
            {{- if .Position}}{{.Position.Name}}{{- else}}Level{{- end}}
        </div>
    </div>
    <div class="row h-25 align-items-center mb-2">
        <div class="col">
            <div class="container text-light text-center p-0">
                <div class="row h3">
                    <div class="col">Roll</div>
                </div>
                <div class="row no-gutters align-self-center h1">
                    <div class="col" id="rollLeftId"></div>
                    <div class="col-8" id="rollProgressId">${createProgress(0)}</div>
                    <div class="col" id="rollRightId"></div>
                </div>
                <div class="row no-gutters h6">
                    <div class="col">Left</div>
                    <div class="col-8 h3" id="rollDistanceId">0.0 {{.Preferences.DimensionUnits}}</div>
                    <div class="col">Right</div>
                </div>
            </div>
        </div>
    </div>
    <div class="row h-25 align-items-center mb-3">
        <div class="col">
            <div class="container text-light text-center p-0">
                <div class="row h3">
                    <div class="col">Pitch</div>
                </div>
                <div class="row no-gutters align-self-center h1">
                    <div class="col" id="pitchLeftId"></div>
                    <div class="col-8" id="pitchProgressId">${createProgress(0)}</div>
                    <div class="col" id="pitchRightId"></div>
                </div>
                <div class="row no-gutters h6">
                    <div class="col">Front</div>
                    <div class="col-8 h3" id="pitchDistanceId">0.0 {{.Preferences.DimensionUnits}}</div>
                    <div class="col">Rear</div>
                </div>
            </div>
        </div>
    </div>
    {{- if .Position}}
        <div class="row">
            <div class="col">
                <a class="btn btn-lg btn-primary btn-block" role="button" href="/html/position/{{.Position.ID}}">Edit</a>
            </div>
        </div>
    {{- end}}
</div>
{{- template "jsutil"}}
<script>
function updateAxis(dimension, prefix, value) {

    const left = document.getElementById(prefix + 'LeftId');
    const right = document.getElementById(prefix + 'RightId');

    if (Math.abs(value) < {{.Config.DisplayLevelTolerance}}) {
        left.innerHTML = ''
        right.innerHTML = ''
        value = 0.0
    } else if (value < 0) {
        left.innerHTML = '&#9660;' <!-- TODO Put these in the config -->
        right.innerHTML = '&#9650;'
    } else {
        left.innerHTML = '&#9650;'
        right.innerHTML = '&#9660;'
    }

    document.getElementById(prefix + 'ProgressId').innerHTML = createProgress(value)

    const distanceDiv = document.getElementById(prefix + 'DistanceId')
    const length = 2 * Math.pow(dimension, 2.0);
    const distance = Math.sqrt(length - (length * Math.cos(value * Math.PI / 180.0)));
    distanceDiv.innerHTML = distance.toPrecision(2) + " {{.Preferences.DimensionUnits}}"
}
function updateLevel(current) {
    if (document.getElementById('recallId')) {
        updateAxis({{.Preferences.DimensionWidth}}, 'roll', current.roll - {{- if .Position}}{{.Position.Roll}}{{- else}}0.0{{- end}})
        updateAxis({{.Preferences.DimensionLength}}, 'pitch', current.pitch - {{- if .Position}}{{.Position.Pitch}}{{- else}}0.0{{- end}})
        return true
    }
    return false
}
function constrainValue(value, min, max) {
    return Math.min(Math.max(value, min), max)
}
function calculateValueRatio(value, min, max) {
    const constrainedValue = constrainValue(value, min, max)
    return (constrainedValue - min) / (max - min)
}
function createProgress(angle) {
    const minValue = -4.0
    const maxValue = 4.0
    const tolerance = 0.1
    const width = 20.0
    const halfWidth = width / 2.0

    let relativeValue = 100.0 * calculateValueRatio(angle, minValue, maxValue)
    relativeValue = constrainValue(relativeValue, halfWidth, 100.0 - halfWidth)

    const lowerProgress = relativeValue - halfWidth
    const color = Math.abs(angle) < tolerance ? 'bg-success' : 'bg-primary'

    return `
        <div class="progress" style="height: 3rem;">
            <div class="progress-bar bg-light" role="progressbar" style="width: ${lowerProgress}%" aria-valuenow="1" aria-valuemin="0" aria-valuemax="100"></div>
            <div class="progress-bar ${color}" role="progressbar" style="width: ${width}%" aria-valuenow="1" aria-valuemin="0" aria-valuemax="100">${angle.toPrecision(2)}Â°</div>
        </div>
    `
}
function displayUpdate(timer) {
    getUrl('/api/corrected')
        .then(current => {
            if (!updateLevel(current)) {
                clearInterval(timer)
            }
        })
        .catch(err => console.error(err));
}

document.getElementById('rollProgressId').innerHTML = createProgress(0)
document.getElementById('pitchProgressId').innerHTML = createProgress(0)

const timeout = 1000.0 / {{.Config.DisplayUpdateRate}}
const timer = setInterval(() => {
    displayUpdate(timer)
}, timeout)

</script>
{{- template "footer"}}
{{- end}}
